@model AttendanceSystem.ViewModels.Teacher.TeacherReportsViewModel
@using AttendanceSystem.Models
@{
    ViewData["Title"] = "Attendance Reports";
}

<div class="container">
    <h2>Attendance Reports</h2>

    <div class="row mt-4">
        <!-- Attendance Statistics Chart -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>Attendance Statistics</h5>
                </div>
                <div class="card-body">
                    @if (Model.AttendanceStats != null && Model.AttendanceStats.Any())
                    {
                        <canvas id="attendanceChart" height="250"></canvas>
                    }
                    else
                    {
                        <div class="alert alert-info">No attendance data available</div>
                    }
                </div>
            </div>
        </div>

        <!-- Course Summary Table -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>Course Summary</h5>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Course</th>
                                <th>Total Attendances</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var course in Model.Courses)
                            {
                                <tr>
                                    <td>@course.Name</td>
                                    @* <td>@(course.Attendances?.Count ?? 0)</td> *@
                                    <td>
                                        <a asp-action="CourseDetails" asp-route-id="@course.CourseId"
                                           class="btn btn-sm btn-info">
                                            View Details
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('attendanceChart').getContext('2d');

            const chartData = {
                labels: ['Present', 'Late', 'Absent', 'Excused'],
                datasets: [{
                    data: [
        @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Present)?.Count ?? 0,
        @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Late)?.Count ?? 0,
        @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Absent)?.Count ?? 0,
        @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Excused)?.Count ?? 0
                    ],
                    backgroundColor: [
                        '#28a745', // Present
                        '#ffc107', // Late
                        '#dc3545', // Absent
                        '#17a2b8'  // Excused
                    ]
                }]
            };

            new Chart(ctx, {
                type: 'pie',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        });
    </script>
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        @if (Model.AttendanceStats != null && Model.AttendanceStats.Any())
        {
            var present = @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Present)?.Count ?? 0;
            var late = @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Late)?.Count ?? 0;
            var absent = @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Absent)?.Count ?? 0;
            var excused = @Model.AttendanceStats.FirstOrDefault(s => s.Status == AttendanceStatus.Excused)?.Count ?? 0;
            <text>
                    const ctx = document.getElementById('attendanceChart').getContext('2d');
                    const statusOrder = ['Present', 'Late', 'Absent', 'Excused'];
                    const backgroundColors = [
                        '#28a745', // Present
                        '#ffc107', // Late
                        '#dc3545', // Absent
                        '#17a2b8'  // Excused
                    ];
                    const counts = [@present, @late, @absent, @excused];

                    new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: statusOrder,
                            datasets: [{
                                data: counts,
                                backgroundColor: backgroundColors,
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'right',
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const label = context.label || '';
                                            const value = context.raw || 0;
                                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                            return `${label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });
            </text>
        }
        });
    </script>
}
}

